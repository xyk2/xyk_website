<?xml version="1.0" encoding="UTF-8"?>
<item><pubDate>Thu, 16 May 2013 22:44:40 +0800</pubDate><title><![CDATA[virtual lane graphics for swimming with css3]]></title><url><![CDATA[virtual-graphics-for-swimming]]></url><meta><![CDATA[]]></meta><metad><![CDATA[]]></metad><menu><![CDATA[virtual graphics for swimming]]></menu><menuOrder><![CDATA[0]]></menuOrder><menuStatus><![CDATA[]]></menuStatus><template><![CDATA[template.php]]></template><parent><![CDATA[projects]]></parent><content><![CDATA[&lt;p&gt;
	If you watched any of the Olympic swimming events last year on television, you probably saw something like this:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/olympics.jpg&quot; style=&quot;width: 700px; height: 383px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	Pretty cool stuff. These &#039;virtual graphics&#039; for sports always intrigue me because there is practically zero time to edit it into the shot. Everything has to be done in real-time. Graphics like this also appear in many other high-profile sporting events like the Super Bowl and the World Series, where the ball is tracked three-dimensionally live.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	Now, my school just happened to be hosting a swimming meet between several other schools. We were going to broadcast and record it anyway, so I thought I might as well try to recreate the graphics. In the end, what I came up with was pretty much visually the same as the one you see in the Olympics.&lt;/p&gt;
&lt;h2&gt;
	olympic technology&lt;/h2&gt;
&lt;p&gt;
	In a nutshell, the process works by taking the clean feed from the camera and tracking the lane dividers separating the lanes. Graphics are then inserted between, which is what you see up top. The graphics also adapt to the shot, so if the operator pans or zooms, the graphics stay where they are. I don&#039;t actually know how they manage to track camera motion in the Olympics, but in the NFL, there are special mechanical rigs attached to the camera that helps the graphics software.&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	three dimensional projection&lt;/h2&gt;
&lt;p&gt;
	Doing camera tracking would make it a hundred times more complicated, so I didn&#039;t bother trying to figure that out. In hindsight, I think it would have been relatively easy to do as long as I had rotary encoders on the tripod feeding data to the renderer.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	I spent many hours trying to pick something to render all the graphics (including the static ones). What renders graphics fast and can update quickly? A browser, of course. The Chrome Skia and V8 engine are heavily optimized for graphics rendering, and HTML5 has matured to a point where you can do advanced graphics like this.&lt;/p&gt;
&lt;p&gt;
	CSS3 has an amazing property called &lt;code&gt;perspective&lt;/code&gt; that can transform this:&lt;/p&gt;
&lt;p&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/unprojected.png&quot; style=&quot;width: 165px; height: 330px; float: left; padding-right: 10px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	Into what you see above.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	Imagine a cube with all faces transparent except for the bottom, which composed of the image to the left. Normally, the image would look just like that: looked down from the top face in a birds-eye view. Now imagine the cube rotating on all three axes. This shifts the perspective, and with some educated guesstimation, the image can be projected virtually onto anything.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/perspective_example.jpg&quot; style=&quot;width: 386px; height: 142px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	The red lines are the edges of the imaginary prism surrounding each row. The water surface of the pool can be thought of as the bottom face of the prism.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/test_image.jpg&quot; style=&quot;width: 700px; height: 440px;&quot; /&gt;&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	The graphic overlaid on the school&#039;s pool. This is a test image; scroll down for screen captures from an actual race. &lt;strong&gt;Play with it in your browser &lt;a href=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/lane_marker_overlay/demo.html&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
	keying&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/key_sample.jpg&quot; style=&quot;width: 500px; height: 332px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	For actual keying, the background (meaning everything except the graphic itself) is set to rgb(0,255,0). The production mixer my school has is the Sony Anycast, which takes a VGA signal directly from my laptop. This is keyed over the finish-line camera shot I set up on the balcony above the pool.&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	practicality and limitations&lt;/h2&gt;
&lt;p&gt;
	The use of a subtractive keying system (removing the green) poses several limitations on the graphics. The most obvious would be when the swimmer dives, the graphics float above the swimmer. Ideally, the swimmer&#039;s body would literally &#039;fly&#039; over the graphics into the water. Another limitation would be dynamic opacity. The Anycast only accepts a single opacity level for each key, so I had to balance it between other static graphics.&lt;/p&gt;
&lt;p&gt;
	Compared to the Olympics, the camera placement is not ideal. It is a lot closer to the pool, so I had to use a wide-angle lens, giving the picture corner distortion. It&#039;s not obvious, but each lane had small angular adjustments to account for distortion.&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	experiment&lt;/h2&gt;
&lt;p&gt;
	Experiment and play with the overlay &lt;a href=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/lane_marker_overlay/demo.html&quot;&gt;here&lt;/a&gt;. Drag the sliders to see how &lt;code&gt;perspective&lt;/code&gt;&amp;nbsp;in CSS works. Does not work in IE&amp;lt;10 (edit - works in IE10. Thanks to the commenters who let me know).&lt;/p&gt;
&lt;h2&gt;
	gallery&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/IMG_0067.JPG&quot; style=&quot;width: 750px; height: 363px;&quot; /&gt;Camera placement relative to the pool. The camera on the left side of the balcony is the primary tracking camera. On the pool deck next to the flag pole is the robotic camera I built.&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/race_example.jpg&quot; style=&quot;width: 750px; height: 417px;&quot; /&gt;Screen capture from an actual race.&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/virtual_graphics_swimming/IMG_0046.JPG&quot; style=&quot;width: 750px; height: 482px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	Some of the production equipment. On the far left is the dedicated graphics laptop From right to left: Sony Anycast mixer, computer for streaming and recording, sound mixer, and program monitor.&lt;/p&gt;
]]></content><private><![CDATA[]]></private><author><![CDATA[xiaoyangkao2]]></author><creation_date><![CDATA[february 16, 2013]]></creation_date><creDate>Thu, 16 May 2013 22:44:40 +0800</creDate><user><![CDATA[xiaoyangkao2]]></user></item>
