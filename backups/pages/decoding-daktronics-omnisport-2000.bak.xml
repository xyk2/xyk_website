<?xml version="1.0" encoding="UTF-8"?>
<item><pubDate>Sat, 18 May 2013 22:49:33 +0800</pubDate><title><![CDATA[Decoding the Daktronics Omnisport 2000]]></title><url><![CDATA[decoding-daktronics-omnisport-2000]]></url><meta><![CDATA[]]></meta><metad><![CDATA[Decoding and interpreting RS-232 serial signals from a Daktronics swimming timing console. Touchpad signals and running time are converted to television graphics.]]></metad><menu><![CDATA[reverse engineering the daktronics omnisport 200]]></menu><menuOrder><![CDATA[0]]></menuOrder><menuStatus><![CDATA[]]></menuStatus><template><![CDATA[template.php]]></template><parent><![CDATA[projects]]></parent><content><![CDATA[&lt;p&gt;
	&lt;em&gt;This is an extended version of the &lt;a href=&quot;https://github.com/xyk2/daktronics&quot;&gt;README on github&lt;/a&gt;. &lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/daktronics_decoder/header.png&quot; style=&quot;width: 700px; height: 290px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	This project came out of neccessity after a software-based attempt failed. I really wanted to avoid working with hardware on the system because it takes much longer than pure software, but in the end I had to for the sake of simplicity.&lt;/p&gt;
&lt;h2&gt;
	timing console&lt;/h2&gt;
&lt;p&gt;
	The timing console has three RS232 serial ports: one for the meet manager, one for a venus scoreboard, and another to connect to the PC control software. The PC software from daktronics costs a ton, so I didn&#039;t bother trying to work with that. The meet manager port is obviously used for the results, so I couldn&#039;t use that either. That left the RTD scoreboard port, which is what is used for this decoder.&lt;/p&gt;
&lt;h2&gt;
	signal&lt;/h2&gt;
&lt;p&gt;
	The port is for a scoreboard, so logically it should at least have a running-time signal. After looking at it on a serial terminal, I figured out that it sends split times and place data as well.&lt;/p&gt;
&lt;p&gt;
	Raw data from the console looks like this:&lt;/p&gt;
&lt;p&gt;
	&lt;iframe src=&quot;http://pastebin.com/embed_iframe.php?i=wa9LQwpG&quot; style=&quot;border:none;width:100%;height:300px;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	It looks like a mess, because it is. Actual data is embedded between keepalive signals, which are then contained within control characters. The periods in the example are not actually ASCII periods (0x2E), but rather control characters that cannot be rendered in the serial terminal. Browsers, however, can render them properly, and this is what a typical data packet looks like:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;font-family: &#039;courier new&#039;, courier, monospace;&quot;&gt;&lt;code&gt;&lt;span style=&quot;font-size:26px;&quot;&gt;&lt;strong&gt;␖&lt;/strong&gt;&lt;/span&gt;00000000&lt;span style=&quot;font-size:26px;&quot;&gt;&lt;strong&gt;␁&lt;/strong&gt;&lt;/span&gt;0042100000&lt;span style=&quot;font-size:26px;&quot;&gt;&lt;strong&gt;␂ &amp;nbsp; &amp;nbsp;&lt;/strong&gt;&lt;/span&gt;4.0 &amp;nbsp;&lt;span style=&quot;font-size:26px;&quot;&gt;&lt;strong&gt;␄&lt;/strong&gt;&lt;/span&gt;C0&lt;span style=&quot;font-size:26px;&quot;&gt;&lt;strong&gt;␗&lt;/strong&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	The control characters are bolded. Everything between SYN (0x16) and STX (0x02) is irrelevant to the actual data, so it is dropped from the decoded signal. I still haven&#039;t figured out what the &lt;code&gt;0042100000 &lt;/code&gt;represents, but it might just be another sync signal like the string of zeroes after SYN. The &lt;code&gt;C0&lt;/code&gt; is probably a checksum, but I didn&#039;t bother working it out.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	\\n and sequential sorting&lt;/h2&gt;
&lt;h3&gt;
	first stage&lt;/h3&gt;
&lt;p&gt;
	The first stage of sorting applies these filters to all packets:&lt;/p&gt;
&lt;ol style=&quot;float:left;&quot;&gt;
	&lt;li&gt;
		Remove data between SYN and STX (inclusive)&lt;/li&gt;
	&lt;li&gt;
		Remove data between EOT and ETB (inclusive)&lt;/li&gt;
	&lt;li&gt;
		Trim leading and trailing whitespace&lt;/li&gt;
	&lt;li&gt;
		Add a linefeed and carriage return to the end&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
	&lt;iframe src=&quot;http://pastebin.com/embed_iframe.php?i=7u24FiFs&quot; style=&quot;border:none;width:300px;height:300px;margin:10px;float:right;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h3&gt;
	&amp;nbsp;&lt;/h3&gt;
&lt;h3&gt;
	&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;
	secondary stage&lt;/h3&gt;
&lt;p&gt;
	The first stage of filtering returns these (names are starred out). Significantly better than the raw data, but still a lot of noise considering all I want is the running time and splits.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	One more filter is applied after the first stage:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
		Remove packets that do not have a period (ASCII 0x2E)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	This cleans out everything except running times and splits.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	hardware&lt;/h2&gt;
&lt;p&gt;
	&lt;img alt=&quot;&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/daktronics_decoder/test.png&quot; style=&quot;width: 400px; height: 301px; float: left;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	Not a lot in terms of hardware for this one.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	Out of the 9 pins from the console, only two are used: TX and ground. The signal is fed into the classic MAX232 to &amp;nbsp; convert it down to TTL logic levels.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	software&lt;/h2&gt;
&lt;p&gt;
	The latest version will always be &lt;a href=&quot;https://github.com/xyk2/daktronics&quot;&gt;on github&lt;/a&gt;.&lt;/p&gt;
&lt;div style=&quot;background: #f8f8f8; overflow:auto;width:730px;color:black;background:white;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;
	&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;
&lt;span style=&quot;color: #BC7A00&quot;&gt;#define BUFFER_STRING_SIZE 50&lt;/span&gt;
String inputString &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&quot;&quot;&lt;/span&gt;;         &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// a string to hold incoming data&lt;/span&gt;
String oldString &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&quot;&quot;&lt;/span&gt;;
&lt;span style=&quot;color: #B00040&quot;&gt;char&lt;/span&gt; rxbuffer[BUFFER_STRING_SIZE];

&lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;setup&lt;/span&gt;() {
  UCSR0A &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;U2X0; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// async&lt;/span&gt;
  UCSR0B &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;RXCIE0) &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;UDRIE0) &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;RXEN0) &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;TXEN0); &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// enable RXTX, register interrupts&lt;/span&gt;
  UCSR0C &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;UCSZ01) &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;UCSZ00); &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// 8 data bits&lt;/span&gt;
  UBRR0L &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;103&lt;/span&gt;; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// 19.2k baud&lt;/span&gt;

  DDRB &lt;span style=&quot;color: #666666&quot;&gt;|=&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;PORTB0); &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// status LED output&lt;/span&gt;
  DDRB &lt;span style=&quot;color: #666666&quot;&gt;|=&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;0&amp;lt;&amp;lt;&lt;/span&gt;PORTB1); &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// split switch input  &lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;((PINB &lt;span style=&quot;color: #666666&quot;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;PORTB1))) {
    flash_status_led(&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;80&lt;/span&gt;);
    RUN_TEST_MODE();
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;while&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;) {}; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// enter infinite loop&lt;/span&gt;
  }
  inputString.reserve(BUFFER_STRING_SIZE);
  oldString.reserve(BUFFER_STRING_SIZE);
}

&lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;loop&lt;/span&gt;() {
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;while&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;) {
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;while&lt;/span&gt; (Serial.available()) {
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(Serial.read() &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; Serial.readBytesUntil((&lt;span style=&quot;color: #B00040&quot;&gt;char&lt;/span&gt;)&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;, rxbuffer, BUFFER_STRING_SIZE)) {
          &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; x &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;; x &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt; BUFFER_STRING_SIZE; x&lt;span style=&quot;color: #666666&quot;&gt;++&lt;/span&gt;) { &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// add chars to string&lt;/span&gt;
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;((&lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt;)rxbuffer[x] &lt;span style=&quot;color: #666666&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;) inputString &lt;span style=&quot;color: #666666&quot;&gt;+=&lt;/span&gt; rxbuffer[x]; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// skip null values; add to string&lt;/span&gt;
          }
          inputString.trim(); &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// remove leading and trailing whitespace&lt;/span&gt;
          &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(inputString.indexOf(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;.&quot;&lt;/span&gt;) &lt;span style=&quot;color: #666666&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-1&lt;/span&gt;) { &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// if string does not include time, skip&lt;/span&gt;
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(inputString.length() &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;7&lt;/span&gt;) {
              Serial.print(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;t&quot;&lt;/span&gt;); &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// t for time&lt;/span&gt;
              Serial.println(inputString);
            }
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;((PINB &lt;span style=&quot;color: #666666&quot;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;PORTB1)) &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; oldString &lt;span style=&quot;color: #666666&quot;&gt;!=&lt;/span&gt; inputString) { &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// if split is different from last split transmission&lt;/span&gt;
              PORTB &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;PORTB0);
              Serial.print(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;s&quot;&lt;/span&gt;); &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// s for split&lt;/span&gt;
              Serial.println(inputString.substring(&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;) &lt;span style=&quot;color: #666666&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&#039; &#039;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;+&lt;/span&gt; inputString.substring(&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;));
              oldString &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; inputString;
              PORTB &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;0&amp;lt;&amp;lt;&lt;/span&gt;PORTB0);
            }
          }
          inputString &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&quot;&quot;&lt;/span&gt;;
          memset(rxbuffer,&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, BUFFER_STRING_SIZE); 
      }
    }
  }
}


&lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;RUN_TEST_MODE&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt;) {
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;unsigned&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; x&lt;span style=&quot;color: #666666&quot;&gt;=0&lt;/span&gt;; x&lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;5000&lt;/span&gt;; x&lt;span style=&quot;color: #666666&quot;&gt;++&lt;/span&gt;) {
    Serial.print(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;t&quot;&lt;/span&gt;);
    Serial.println(x&lt;span style=&quot;color: #666666&quot;&gt;*0.1&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;);
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(x &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;33&lt;/span&gt;) Serial.println(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;s5 1 3.36 2&quot;&lt;/span&gt;); 
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(x &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;45&lt;/span&gt;) Serial.println(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;s3 2 4.52 2&quot;&lt;/span&gt;); 
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(x &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;65&lt;/span&gt;) Serial.println(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;s7 3 6.50 2&quot;&lt;/span&gt;); 
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(x &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;150&lt;/span&gt;) Serial.println(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;s3 1 15.05 4&quot;&lt;/span&gt;); 
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(x &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;165&lt;/span&gt;) Serial.println(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;s5 2 16.54 4&quot;&lt;/span&gt;); 
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(x &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;166&lt;/span&gt;) Serial.println(&lt;span style=&quot;color: #BA2121&quot;&gt;&quot;s7 3 16.60 4&quot;&lt;/span&gt;);        
    delay(&lt;span style=&quot;color: #666666&quot;&gt;100&lt;/span&gt;);
  }
}

&lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;flash_status_led&lt;/span&gt;(byte number_of_flashes, &lt;span style=&quot;color: #B00040&quot;&gt;unsigned&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; milliseconds) {
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;for&lt;/span&gt;(byte x &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;; x&lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt;number_of_flashes; x&lt;span style=&quot;color: #666666&quot;&gt;++&lt;/span&gt;) {
    PORTB &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;1&amp;lt;&amp;lt;&lt;/span&gt;PORTB0);
    delay(milliseconds);
    PORTB &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (&lt;span style=&quot;color: #666666&quot;&gt;0&amp;lt;&amp;lt;&lt;/span&gt;PORTB0);
    delay(milliseconds); 
  }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;h2&gt;
	&amp;nbsp;&lt;/h2&gt;
&lt;h2&gt;
	decoded data&lt;/h2&gt;
&lt;p&gt;
	There are two types of data packets: running time and splits. Each packet is composed of a prefix (t for running time and s for splits), the packet data, and a carriage return, which serves as the delimiting character.&lt;/p&gt;
&lt;p&gt;
	Typical data packets would look like this:&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;t1:02.1&lt;/code&gt; - pretty self explanatory&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;s3 1 1:11.63 2&lt;/code&gt; - four data points, which are ordered as follows:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
		Lane number&lt;/li&gt;
	&lt;li&gt;
		Place&lt;/li&gt;
	&lt;li&gt;
		Time (split times are accurate to a hundredth of a second)&lt;/li&gt;
	&lt;li&gt;
		Laps of the pool completed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
	Decoded data is fed into Autobahn with python and then to the browser for graphic rendering. The websockets server and rendering engine is in the &lt;a href=&quot;https://github.com/xyk2/IASAS_swimming_2013&quot;&gt;IASAS_swimming_2013 repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	test mode&lt;/h2&gt;
&lt;p&gt;
	The decoder can be put into test mode by resetting with the split button set to the OFF position. This mode ignores data from the console and simulates a test race, which is useful for testing the rendering engine.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
]]></content><private><![CDATA[]]></private><author><![CDATA[xiaoyangkao2]]></author><creation_date><![CDATA[January 8, 2013]]></creation_date><creDate>Sat, 18 May 2013 22:49:33 +0800</creDate><user><![CDATA[xiaoyangkao2]]></user></item>
