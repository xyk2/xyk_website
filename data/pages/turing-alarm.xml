<?xml version="1.0" encoding="UTF-8"?>
<item><pubDate>Sat, 18 May 2013 23:11:42 +0800</pubDate><title><![CDATA[Turing Alarm: A Mathematical Alarm Clock]]></title><url><![CDATA[turing-alarm]]></url><meta><![CDATA[projects]]></meta><metad><![CDATA[Recreating Nick Johnson&#039;s turing alarm in Arduino. Forces you to solve math problems before turning off or snoozing.]]></metad><menu><![CDATA[turing alarm]]></menu><menuOrder><![CDATA[0]]></menuOrder><menuStatus><![CDATA[]]></menuStatus><template><![CDATA[template.php]]></template><parent><![CDATA[projects]]></parent><content><![CDATA[&lt;p style=&quot;text-align: center; &quot;&gt;
	&lt;img alt=&quot;The Turing Alarm. Based on Nick Johnson&#039;s PIC&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/turing_alarm/turing_alarm_cover.jpg&quot; style=&quot;width: 600px; height: 401px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	The arduino turing alarm is an adaptation of &lt;a href=&quot;http://www.cheaphack.net/2008/01/turing-alarm-clock.html&quot;&gt;Nick Johnsons PIC-based one&lt;/a&gt;. At the time, I found that the PIC chip he used was a little too advanced for me, so I decided to use the Arduino microcontroller. All credits for the idea goes to Nick.&lt;/p&gt;
&lt;p&gt;
	The turing alarm forces you to solve math problems when you wake up. If you get the math problem correct, the alarm stops, and if you don’t, you will have to solve another one. My version also includes a 12V light dimmer for the strip lights above my bed. A DS1307 real time clock (RTC) keeps track of the time and the menus are controlled with five buttons.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	Code and circuit diagrams are on &lt;a href=&quot;https://github.com/xyk2/turing-alarm-for-arduino&quot;&gt;my github page&lt;/a&gt;. High resolution photos and other images are on my &lt;a href=&quot;https://picasaweb.google.com/100717066473058120846/TuringAlarm?authuser=0&amp;amp;feat=directlink&quot;&gt;Picasa web album&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	tools and materials&lt;/h2&gt;
&lt;p&gt;
	• &lt;strong&gt;Arduino board&lt;/strong&gt; - I used the Uno board for testing and the Pro Mini for the final project&lt;br /&gt;
	• &lt;strong&gt;DS1307 RTC&lt;/strong&gt; - You can use the DIP version; I used the breakout from SparkFun&lt;br /&gt;
	• &lt;b&gt;SparkFun Serial LCD 16×2 &lt;/b&gt;&amp;nbsp;- This is much easier to interface with than a parallel LCD&lt;br /&gt;
	• &lt;strong&gt;Small 12mm buzzer&lt;/strong&gt; (2.048 kHz)&lt;br /&gt;
	• 5 &lt;strong&gt;SPST &lt;/strong&gt;panel mount momentary switches&lt;br /&gt;
	• &lt;strong&gt;10k pull-down resistors &lt;/strong&gt;- You will need seven of these&lt;br /&gt;
	• 1 &lt;strong&gt;DC jack&lt;/strong&gt; panel mount (two if you want light control)&lt;br /&gt;
	• &lt;strong&gt;Project box&lt;/strong&gt; - I used a 6 x 3 x 2″ project box from Radioshack&lt;br /&gt;
	• &lt;strong&gt;Mounting screws&lt;/strong&gt; and nuts (4-40 ½ inch) - Mount LCD and slide potentiometer&lt;br /&gt;
	• 10K &lt;strong&gt;slide potentiometer&lt;/strong&gt; - Only if you want light control&lt;br /&gt;
	•&lt;strong&gt; N-channel MOSFET&lt;/strong&gt; -&amp;nbsp;Only if you want light control&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	RTC and LCD&lt;/h2&gt;
&lt;p style=&quot;text-align: center; &quot;&gt;
	&lt;img alt=&quot;Sparkfun RTC module&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/turing_alarm/turing_alarm_rtc.jpg&quot; style=&quot;width: 200px; height: 213px;&quot; /&gt;&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;Sparkfun serial lcd module&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/turing_alarm/turing_alarm_lcd.jpg&quot; style=&quot;width: 350px; height: 131px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	The RTC module uses the Wire I2C interface to communicate with the Arduino on A4 and A5. The data line (SDA) is on A4, and the clock line (SCL) is on A5. With the coin-cell battery on the module, the RTC can run for up to 17 years without an outside power source.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	To set the time I used ladyada’s example code from her RTC library and tutorial. Her code sets the time using the local time on your computer. Make sure to uncomment this line of code:&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RTC.adjust(DateTime(__DATE__, __TIME__));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	A serial LCD is easier to use for this project because it only uses one data line (TX). For beginners like me SparkFun’s serial LCD is very easy to interface and use. Only three pins are needed, whereas a parallel LCD requires more than ten. To change a setting on the LCD like cursor position and backlight brightness, send a command line followed by the instruction, as outlined in the datasheet. For example, to clear the LCD you send this block:&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(0xFE, BYTE); // command line&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(0x01, BYTE); // instruction&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	For the turing alarm I used four commands: clear LCD, move to line 1, move to line 2, and set brightness. I wrote the ones used commonly into functions so it can be easily accessed. You can read more about the LCD and the protocol on the &lt;a href=&quot;http://www.sparkfun.com/datasheets/LCD/SerLCD_V2_5.PDF&quot;&gt;datasheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	libraries and layout&lt;/h2&gt;
&lt;p&gt;
	I used three libraries for this project: the RTC library from ladyada, the Wire library for I2C, and the debounce (bounce) library from Thomas Fredericks. You can download them here:&lt;/p&gt;
&lt;p&gt;
	&lt;a href=&quot;https://github.com/adafruit/RTClib&quot;&gt;RTClib&lt;/a&gt;: Ladyada’s github page&lt;br /&gt;
	&lt;a href=&quot;http://arduino.cc/playground/Code/Bounce&quot;&gt;Bounce&lt;/a&gt;: Arduino.cc playground&lt;br /&gt;
	&lt;a href=&quot;http://www.arduino.cc/en/Reference/Wire&quot;&gt;Wire&lt;/a&gt;: Already included in IDE; go to Sketch &amp;gt; Import Library &amp;gt; Wire&lt;/p&gt;
&lt;p style=&quot;text-align: center; &quot;&gt;
	&lt;img alt=&quot;Basic schematic. made with fritzing&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/turing_alarm/turing_alarm_hookup.jpg&quot; style=&quot;width: 600px; height: 546px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	The turing alarm uses seven digital pins and two analog pins. The two analog pins are for I2C communication on the RTC and the digital pins are for the LCD, buttons, and the buzzer.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	Code&lt;/h2&gt;
&lt;p&gt;
	&lt;em&gt;The code was written way back when I first learned the language. I realize that it is incredibly inefficient, but it worked at the time so I went with it. If I have time later, it will be rewritten and pushed on my github page.&amp;nbsp;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
	The code uses seven different while loops for each menu. Within each of those while loops are if statements and display commands. The seven menus are:&lt;/p&gt;
&lt;p&gt;
	• Main menu&lt;br /&gt;
	• Choose set alarm, brightness, or IO monitor&lt;br /&gt;
	• Set alarm time&lt;br /&gt;
	• IO monitor&lt;br /&gt;
	• Brightness control&lt;br /&gt;
	• Alarm is on; turn off?&lt;br /&gt;
	• Alarm math menu (this one is the menu when the alarm goes off)&lt;/p&gt;
&lt;p&gt;
	When the the device is powered up, this function loops:&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;displayCurrentTime();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	This function gets the time from the RTC and writes it to the LCD screen in a two-line configuration. The date is displayed centered on line 1 and the time is centered on line two.&lt;/p&gt;
&lt;p&gt;
	When the OK button is pressed, the time is set and this line of code runs:&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (okDebounce == HIGH) {&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alarmSetting = 1;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;timePosition = 0;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mathValOne = random(11, 20);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mathValTwo = random(9, 15);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mathValThree = random(20, 150);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inputAnswer=(mathValOne*mathValTwo+mathValThree)-random(35,35);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delay(20);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MenuPosition = 7;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delay(100);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clearLCD();&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delay(500);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;alarmSetting&lt;/code&gt; stores whether the alarm is on or off with a boolean variable: 1 for on, and 0 for off. This is used in other parts of the code to check if the alarm is on or not.&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;timePosition&lt;/code&gt; is used to store which time value is being changed (second, minute or time). This resets it to 0, or second. (0 for second, 1 for minute, and 2 for hour).&lt;/p&gt;
&lt;p&gt;
	The next three lines of code determines the math problem. It picks a random value between the values shown based on a seed from &lt;code&gt;randomSeed(analogRead(2))&lt;/code&gt; in the setup.&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;inputAnswer&lt;/code&gt; stores what the user inputs as an answer. The line of code shown simply sets the variable to a value that is close to the actual answer.&lt;/p&gt;
&lt;p&gt;
	The next five lines of code clears the LCD and changes the menu.&lt;/p&gt;
&lt;p&gt;
	After the alarm time is set, the loop constantly checks if the alarm time is equal to the real time with this line of code:&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(alarmSetting == 1 &amp;amp;&amp;amp; alarmSecond == now.second() &amp;amp;&amp;amp; alarmMinute == &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;now.minute() &amp;amp;&amp;amp; alarmHour == now.hour() )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	The problem with this line is that it doesn’t check for date, so the alarm goes off within 24 hours. It is adequate for myself, but if you need to set alarms for more than a day later add a set date function.&lt;/p&gt;
&lt;p&gt;
	When the alarm goes off, this block of code runs:&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alarmNoiseOn();&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;realAnswer = mathValOne * mathValTwo + mathValThree;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;moveLineOne();&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(” Hello!”);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // wakeup message&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;moveLineTwo();&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(mathValOne);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(“*”);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(mathValTwo);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(“+”);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(mathValThree);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(” = “);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(inputAnswer);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(” ?”);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delay(100);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(debounceIncrease == HIGH) {&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inputAnswer++;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(debounceDecrease == HIGH) {&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inputAnswer–;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;AlarmNoise&lt;/code&gt; on is a tone function that beeps the buzzer in a familiar &#039;alarm&#039; pattern. &lt;code&gt;realAnswer&lt;/code&gt; stores the actual answer that will turn off the alarm. The last two functions check if the up or down buttons have been pressed.&lt;/p&gt;
&lt;p&gt;
	When the OK button is pressed, the code checks if the input answer is equal to the actual answer. If it is, &lt;code&gt;noTone&lt;/code&gt; is called (turns off the buzzer) and all the variables are reset. A wakeup message is displayed for five seconds then the alarm returns to the main time menu.&lt;/p&gt;
&lt;p&gt;
	&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delay(500);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;noTone(9);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clearLCD();&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alarmSetting = 0;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;moveLineOne();&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Serial.print(” Good Morning!”);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delay(5000);&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MenuPosition = 0;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mathValOne = 0;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mathValTwo = 0;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mathValThree = 0;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alarmSecond = 0;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alarmMinute = 0;&lt;br /&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alarmHour = 0;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
	If the input answer is not equal to the actual answer, then the math values are reset to a different random value, giving the user another problem to solve.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	pcb&lt;/h2&gt;
&lt;p style=&quot;text-align: center; &quot;&gt;
	&lt;img alt=&quot;Eagle PCB layout capture&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/turing_alarm/turing_alarm_pcb.png&quot; style=&quot;width: 200px; height: 200px;&quot; /&gt;&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;Custom etched PCB with photoresist&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/turing_alarm/turing_alarm_etch.jpg&quot; style=&quot;width: 275px; height: 149px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	I also drew a PCB design in EagleCAD for those who are too lazy to solder on a perfboard. The double-sided one is very densely populated, and is meant for a board-house to make. All the parts are squeezed in to a 5cm square to keep the price low ($9.90 at Seeed). There is also a schematic that comes with the PCB layout.&lt;/p&gt;
&lt;p&gt;
	If you would rather etch your own circuit board, use the single layer version that is much bigger (6*10 cm) and easier to etch. The picture is of the board I etched. Note that there is one jumper that you will need to connect with hookup wire; it is located at the top center of the board.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	mounting parts&lt;/h2&gt;
&lt;p style=&quot;text-align: center; &quot;&gt;
	&lt;img alt=&quot;Internals.&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/turing_alarm/turing_alarm_inside.jpg&quot; style=&quot;width: 300px; height: 200px;&quot; /&gt;&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;Underside of the front panel&quot; src=&quot;http://d30cz35xum7wy8.cloudfront.net/projects/turing_alarm/turing_alarm_mount.jpg&quot; style=&quot;width: 250px; height: 237px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	All of the parts except for the buttons and the jack are mounted with 4-40 screws and nuts. The buttons and jacks are already threaded with a nut, so a 1/4 inch hole is all you need. For the 4-40 screws, I used a ~2.5 mm hole.&lt;/p&gt;
&lt;p style=&quot;text-align: center; &quot;&gt;
	The LCD has four mounting holes, one on each corner. The LCD itself does not sit flush with the board, so you will need to use spacers on each hole. I found that two 4-40 nuts work well as spacers. You will need 12 nuts in total for the LCD: 8 for spacing, and 4 for securing.&lt;/p&gt;
&lt;p&gt;
	The slide potentiometer is a little tricky because many spacers are needed. When the knob is attached, it sits much higher than where the mounting holes are. Just keep on adding spacers until the knob sits relatively flush on the box.&lt;/p&gt;
&lt;p&gt;
	Mark where to drill the holes and mount the components. If you need measurements, open the CorelDRAW file and use the ruler tool. You can also submit this file to a laser-cutting service (Pololu, for example) and have it laser etched and cut.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	troubleshooting&lt;/h2&gt;
&lt;p&gt;
	&lt;strong&gt;The serial LCD is displaying a black line/random text/nothing.&lt;/strong&gt;&lt;br /&gt;
	I got this problem very often when working with the LCD. Most of the time the problem fixes itself when you cycle the power or adjust the contrast. To prevent this from happening again, remove the serial wire from the Arduino when uploading code. Sometimes it sends a random serial message that could change the settings on the LCD or display random text. If cycling power does not fix the problem, upload and run Reset_Serial_LCD.pde attached below.&lt;/p&gt;
&lt;p&gt;
	&lt;strong&gt;The time stays at 00:00:00 or doesn’t change.&lt;/strong&gt;&lt;br /&gt;
	Sometimes the RTC stops itself when debugging. Rerun the set-time sketch and you should be fine.&lt;/p&gt;
]]></content><private><![CDATA[]]></private><author><![CDATA[xiaoyangkao2]]></author><creation_date><![CDATA[April 28, 2012]]></creation_date><creDate>Sat, 18 May 2013 23:11:42 +0800</creDate><user><![CDATA[xiaoyangkao2]]></user></item>
